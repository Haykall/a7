# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(start_num){
result <- start_num + 3
result
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
imperial_to_metric <- function(num_feet, num_inches) {
feet_in_inches <- numFeet * 12
total_inches <- feet_in_inches + num_inches
num_meters <- total_inches * 0.025
num_meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 9)
imperial_to_metric <- function(num_feet, num_inches) {
feet_in_inches <- num_feet * 12
total_inches <- feet_in_inches + num_inches
num_meters <- total_inches * 0.025
num_meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 9)
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Jeremy"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
hours_in_day <- 24
minutes_in_a_hour <- 60
minutes_in_a_day <- hours_in_day * minutes_in_a_hour
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
days_in_a_year <- 365
hours_in_a_year <- hours_in_day * days_in_a_year
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
result <- paste("Hello, my name is ", name, ", and I'm ", age, " years old.", sep = "")
result
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(num) {
result <- num * 2
result
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(num) {
result <- num^3
result
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Into the Spider-Verse", "Moonrise Kingdom", "The Grand Budapest Hotel", "Momento", "Gone Girl", "Fight Club")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1:3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- c(paste(movies, "is a great movie!"))
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[c(-4)]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_date <- "2019-06-14"
summer_break <- as.Date(summer_date)
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- as.numeric(summer_break - today)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, next_birthday) {
next_birthday_date <- as.Date(next_birthday)
days_until_birthday <- next_birthday_date - today
new_age <- age + 1
intro_text <- make_introduction(name, age)
days_text <- paste("In ", days_until_birthday, " days, I'll be ", new_age, ".", sep = "")
birthday_intro <- paste(intro_text, " ", days_text)
birthday_intro
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2020-01-04")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string_vector) {
# removables <- c()
new_string <- gsub("[0-9]+", "", string_vector)
new_string
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
styler:::style_active_file()
install.packages("styler")
library("styler")
install.packages("lintr")
library("lintr")
install.packages("styler")
styler:::style_active_file()
lint("assignment.R")
lintr::lint("assignment.R")
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages(stringr)
library(stringr)
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Jeremy"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
hours_in_day <- 24
minutes_in_a_hour <- 60
minutes_in_a_day <- hours_in_day * minutes_in_a_hour
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
days_in_a_year <- 365
hours_in_a_year <- hours_in_day * days_in_a_year
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
result <- paste("Hello, my name is ", name, ", and I'm ", age, " years old.", sep = "")
result
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(num) {
result <- num * 2
result
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(num) {
result <- num^3
result
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Into the Spider-Verse", "Moonrise Kingdom", "The Grand Budapest Hotel", "Momento", "Gone Girl", "Fight Club")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1:3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- c(paste(movies, "is a great movie!"))
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[c(-4)]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_date <- "2019-06-14"
summer_break <- as.Date(summer_date)
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- as.numeric(summer_break - today)
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, next_birthday) {
next_birthday_date <- as.Date(next_birthday)
days_until_birthday <- next_birthday_date - today
new_age <- age + 1
intro_text <- make_introduction(name, age)
days_text <- paste("In ", days_until_birthday, " days, I'll be ", new_age, ".", sep = "")
birthday_intro <- paste(intro_text, " ", days_text)
birthday_intro
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2020-01-04")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string_vector) {
# removables <- c()
new_string <- gsub("[0-9]+", "", string_vector)
new_string
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
lintr::lint_packge()
styler:::style_active_file()
lint("assignment.R")
lintr::lint("assignment.R")
install.packages("lintr")
install.packages("lintr")
lintr::lint("assignment.R")
lintr::lint(~/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(/~/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(//~/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(/Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lint(/Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101)
lint(Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101)
lintr::lint(Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(~/Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(~Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(C:Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(C:/Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(C://Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(C:Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
lintr::lint(~Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/"assignment.R")
getwd()
lintr::lint("/Users/jeremy")
source('~/Documents/INFO-201/homework/a2-j1lin0101/assignment.R')
source('~/Documents/INFO-201/homework/a2-j1lin0101/assignment.R')
install.packages("stringr")
lintr::lint()
lintr::lint("assignmet.R")
lintr::lint(~Users/jeremy/Documents/INFO-201/homework/a2-j1lin0101/assignment.R)
getwd()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_date <- "2019-06-14"
summer_break <- as.Date(summer_date)
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_date <- "2019-06-14"
summer_break <- as.Date(summer_date)
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- as.numeric(summer_break - today)
remove_digits <- function(string_vector) {
# removables <- c()
new_string <- gsub("[0-9]+", "", string_vector)
new_string
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
plot_3 <- function(file) {
# Filter through world data frame to get relevant data
data <- read.csv(file = file, stringsAsFactors = FALSE) %>%
select(indicator, human.development.index, world.happiness.report.score)
colnames(world_data) = c("country", "development", "happiness")
world_data <- tail(world_data, -4)
world_data <- world_data %>%
arrange(development) %>%
filter(development != "-",
happiness != "-") %>%
mutate(development = as.numeric(development),
happiness = as.numeric(happiness))
# Summarize top 5 highest and lowest development and compare values
top_5 <- world_data %>%
top_n(5, development) %>%
summarise(mean_dev = mean(development),
mean_happy = mean(happiness)) %>%
mutate(type = "Most Developed")
low_5 <- world_data %>%
top_n(-5, development) %>%
summarise(mean_dev = mean(development),
mean_happy = mean(happiness)) %>%
mutate(type = "Least Developed")
combined <- full_join(top_5, low_5)
# Plot bar graph comparine dev levels to happiness scores
colors <- c("#0072B2", "#FF9999")
dev_happy_plot <- ggplot(data = combined, aes(x = mean_dev, y = mean_happy)) +
geom_bar(stat = "identity", fill = colors) +
geom_text(aes(label = combined$type, vjust = -2)) +
labs(x = "Mean Human Development Index",
y = "Mean Happiness Score",
title = "Happiness Scores of the Top 5 and Lowest 5 Developed Nations") +
scale_y_continuous(limits=c(0, 8))
dev_happy_plot
}
plot_3("WDVP Datasets - small countries are beautiful 6.51.37 PM.csv")
library("dplyr")
library("ggplot2")
plot_3 <- function(file) {
# Filter through world data frame to get relevant data
data <- read.csv(file = file, stringsAsFactors = FALSE) %>%
select(indicator, human.development.index, world.happiness.report.score)
colnames(world_data) = c("country", "development", "happiness")
world_data <- tail(world_data, -4)
world_data <- world_data %>%
arrange(development) %>%
filter(development != "-",
happiness != "-") %>%
mutate(development = as.numeric(development),
happiness = as.numeric(happiness))
# Summarize top 5 highest and lowest development and compare values
top_5 <- world_data %>%
top_n(5, development) %>%
summarise(mean_dev = mean(development),
mean_happy = mean(happiness)) %>%
mutate(type = "Most Developed")
low_5 <- world_data %>%
top_n(-5, development) %>%
summarise(mean_dev = mean(development),
mean_happy = mean(happiness)) %>%
mutate(type = "Least Developed")
combined <- full_join(top_5, low_5)
# Plot bar graph comparine dev levels to happiness scores
colors <- c("#0072B2", "#FF9999")
dev_happy_plot <- ggplot(data = combined, aes(x = mean_dev, y = mean_happy)) +
geom_bar(stat = "identity", fill = colors) +
geom_text(aes(label = combined$type, vjust = -2)) +
labs(x = "Mean Human Development Index",
y = "Mean Happiness Score",
title = "Happiness Scores of the Top 5 and Lowest 5 Developed Nations") +
scale_y_continuous(limits=c(0, 8))
dev_happy_plot
}
plot_3("WDVP Datasets - small countries are beautiful 6.51.37 PM.csv")
setwd("~/Documents/INFO-201/homework/a7")
plot_3 <- function(file) {
# Filter through world data frame to get relevant data
data <- read.csv(file = file, stringsAsFactors = FALSE) %>%
select(indicator, human.development.index, world.happiness.report.score)
colnames(world_data) = c("country", "development", "happiness")
world_data <- tail(world_data, -4)
world_data <- world_data %>%
arrange(development) %>%
filter(development != "-",
happiness != "-") %>%
mutate(development = as.numeric(development),
happiness = as.numeric(happiness))
# Summarize top 5 highest and lowest development and compare values
top_5 <- world_data %>%
top_n(5, development) %>%
summarise(mean_dev = mean(development),
mean_happy = mean(happiness)) %>%
mutate(type = "Most Developed")
low_5 <- world_data %>%
top_n(-5, development) %>%
summarise(mean_dev = mean(development),
mean_happy = mean(happiness)) %>%
mutate(type = "Least Developed")
combined <- full_join(top_5, low_5)
# Plot bar graph comparine dev levels to happiness scores
colors <- c("#0072B2", "#FF9999")
dev_happy_plot <- ggplot(data = combined, aes(x = mean_dev, y = mean_happy)) +
geom_bar(stat = "identity", fill = colors) +
geom_text(aes(label = combined$type, vjust = -2)) +
labs(x = "Mean Human Development Index",
y = "Mean Happiness Score",
title = "Happiness Scores of the Top 5 and Lowest 5 Developed Nations") +
scale_y_continuous(limits=c(0, 8))
dev_happy_plot
}
plot_3("WDVP Datasets - small countries are beautiful 6.51.37 PM.csv")
plot_3 <- function(file) {
# Filter through world data frame to get relevant data
world_data <- read.csv(file = file, stringsAsFactors = FALSE) %>%
select(indicator, human.development.index, world.happiness.report.score)
colnames(world_data) = c("country", "development", "happiness")
world_data <- tail(world_data, -4)
world_data <- world_data %>%
arrange(development) %>%
filter(development != "-",
happiness != "-") %>%
mutate(development = as.numeric(development),
happiness = as.numeric(happiness))
# Summarize top 5 highest and lowest development and compare values
top_5 <- world_data %>%
top_n(5, development) %>%
summarise(mean_dev = mean(development),
mean_happy = mean(happiness)) %>%
mutate(type = "Most Developed")
low_5 <- world_data %>%
top_n(-5, development) %>%
summarise(mean_dev = mean(development),
mean_happy = mean(happiness)) %>%
mutate(type = "Least Developed")
combined <- full_join(top_5, low_5)
# Plot bar graph comparine dev levels to happiness scores
colors <- c("#0072B2", "#FF9999")
dev_happy_plot <- ggplot(data = combined, aes(x = mean_dev, y = mean_happy)) +
geom_bar(stat = "identity", fill = colors) +
geom_text(aes(label = combined$type, vjust = -2)) +
labs(x = "Mean Human Development Index",
y = "Mean Happiness Score",
title = "Happiness Scores of the Top 5 and Lowest 5 Developed Nations") +
scale_y_continuous(limits=c(0, 8))
dev_happy_plot
}
plot_3("WDVP Datasets - small countries are beautiful 6.51.37 PM.csv")
styler:::style_active_file()
styler:::style_active_file()
library("lintr")
lint("chart3.R")
lint("chart3.R")
lint("chart3.R")
