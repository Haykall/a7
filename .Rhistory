# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, next_birthday) {
days_to_birthday <- as.Date(next_birthday) - today
new_age <- my_age + 1
whole_statement <- paste(make_introduction(my_name, my_age), "/n In ",
days_to_birthday, " days I'll be ", new_age, ".")
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-10-04")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
gsub("[0-9]+", "", vector_of_strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("info 200","cse 143")))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("info 200","cse 143"))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("info 200","cse 143"))
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
# install.packages("stringr")
library(stringr)
# Create a numeric variable `my_age` that is equal to your age
my_age <- 18
# Create a variable `my_name` that is equal to your first name
my_name <- "Haykal"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_per_hour <- 60
hours_per_day <- 24
minutes_in_a_day <- hours_per_day * minutes_per_hour
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
days_per_year <- 365
hours_in_a_year <- days_per_year * hours_per_day
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is ", name, " and I'm ", age, " years old.")
introduction
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is ", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
double_value <- value * 2
double_value
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
cubed_value <- value * value * value
cubed_value
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("I love you man", "The Last Song", "Bridesmaids", "Bridge to terabithia",
"The Switch", "Thor-Ragnarock")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- c(movies[1:3])
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- c(paste(movies, "is a great movie!"))
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- c(movies[1:3], movies[5:6])
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- c(length(numbers))
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date("2019-06-14")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, next_birthday) {
days_to_birthday <- as.Date(next_birthday) - today
new_age <- my_age + 1
whole_statement <- paste(make_introduction(my_name, my_age), "/n In ",
days_to_birthday, " days I'll be ", new_age, ".")
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-10-04")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
gsub("[0-9]+", "", vector_of_strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("info 200","cse 143"))
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
# install.packages("stringr")
library(stringr)
# Create a numeric variable `my_age` that is equal to your age
my_age <- 18
# Create a variable `my_name` that is equal to your first name
my_name <- "Haykal"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_per_hour <- 60
hours_per_day <- 24
minutes_in_a_day <- hours_per_day * minutes_per_hour
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
days_per_year <- 365
hours_in_a_year <- days_per_year * hours_per_day
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is ", name, " and I'm ", age, " years old.")
introduction
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is ", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
double_value <- value * 2
double_value
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
cubed_value <- value * value * value
cubed_value
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("I love you man", "The Last Song", "Bridesmaids", "Bridge to terabithia",
"The Switch", "Thor-Ragnarock")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- c(movies[1:3])
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- c(paste(movies, "is a great movie!"))
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- c(movies[1:3], movies[5:6])
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- c(length(numbers))
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 14, 2019). Make sure to use the `as.Date` function again
summer_break <- as.Date("2019-06-14")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, next_birthday) {
days_to_birthday <- as.Date(next_birthday) - today
new_age <- my_age + 1
whole_statement <- paste(make_introduction(my_name, my_age), "/n In ",
days_to_birthday, " days I'll be ", new_age, ".")
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-10-04")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
gsub("[0-9]+", "", vector_of_strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("info 200","cse 143"))
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_points <- c(24, 17, 24, 20)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
seahawks_points_lost <- c(27, 24, 13, 17)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_points, seahawks_points_lost)
view(games)
View(games)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
diff <- seahawks_points - seahawks_points_lost
games$difference <- diff
View(games)
View(games)
# Create a new column "won" which is TRUE if the Seahawks won the game
won <- c(seahawks_points > seahawks_points_lost)
games$won <- won
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Broncos", "Bears", "Cowboys", "Cardinals")
games$opponents <- opponents
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_points <- c(24, 17, 24, 20)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
seahawks_points_lost <- c(27, 24, 13, 17)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_points, seahawks_points_lost)
View(games)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
diff <- seahawks_points - seahawks_points_lost
games$difference <- diff
# Create a new column "won" which is TRUE if the Seahawks won the game
won <- c(seahawks_points > seahawks_points_lost)
games$won <- won
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Broncos", "Bears", "Cowboys", "Cardinals")
games$opponents <- opponents
# Assign your dataframe rownames of their opponents
# View your data frame to see how it has changed!
View(games)
View(games)
# Assign your dataframe rownames of their opponents
rownames("First", "Second", "Third", "Fourth")
# Assign your dataframe rownames of their opponents
rownames("First", "Second", "Third")
?rownames
# Assign your dataframe rownames of their opponents
rownames(games) <- c("First", "Second", "Third", "Fourth")
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee ", [1:100])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee ", [1:100]))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee ", "[1:100]+"))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee ", [1:100]+))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee ", 1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- c(runif(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- c(runif(1:100, 40000, 50000))
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- c(runif(1:100, -5000, 10000))
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary, salary_adjustments)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary <- c(runif(1:100, 40000, 50000))
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary, salary_adjustments)
View(salaries)
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- c(salary + salary_adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- c(salary < salary_2018)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- c(salary + salary_adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- c(salary < salary_2018)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- c(salary < salaries[["salary_2018"]])
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee ", 1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary <- c(runif(1:100, 40000, 50000))
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- c(runif(1:100, -5000, 10000))
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary, salary_adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- c(salary + salary_adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- c(salary < salaries[["salary_2018"]])
# What was the 2018 salary of Employee 57
salaries$employees$"Employee 57"
# What was the 2018 salary of Employee 57
salaries$employees
# What was the 2018 salary of Employee 57
salaries[57, "salary_2018"]
# How many employees got a raise?
who_raise <- c(salaries$raise = TRUE)
hist(salary_adjustments)
# How many employees got a raise?
nrow(salaries[salaries$salary_adjustments > 0])
# How many employees got a raise?
nrow(salaries[salaries$salary_adjustments > 0,])
# What was the dollar value of the highest raise?
max(salaries$salary_adjustments)
# Exercise 7: DPLYR practice with NBA data
# install.packages("dplyr")
library(dplyr)
library(dplyr)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_ data <- read.csv("teams.csv")
setwd("~/Desktop/lab-exercises/week-4")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv("teams.csv")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv("data/teams.csv")
View(team_data)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
mutate(team_data, turnover_steal = TOV / STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team_data <- mutate(team_data, turnover_steal = TOV / STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team_data <- mutate(team_data, turnover_steal = TOV / STL)
# Sort the teams from lowest turnover/steal ratio to highest
team_data <- arrange(turnover_steal)
# Sort the teams from lowest turnover/steal ratio to highest
team_data <- arrange(team_data, turnover_steal)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
highest_rebound <- select(team_data, TRB == max(TRB), Team)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
highest_rebound <- filter(team_data, TRB == max(TRB), Team)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
highest_rebound <- filter(team_data, max(TRB), Team)
View(highest_rebound)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
highest_rebound <- filter(team_data, TRB == max(TRB), Team)
View(highest_rebound)
happiness_plot
setwd("~/Desktop/a7")
# Plot Comparing GDP and World Happiness Index
library(dplyr)
library(plotly)
data_set <- read.csv("WDVP Datasets - small countries are beautiful 6.51.37 PM.csv")
# Removed the countries that didn't have the data available, only 38 countries left
gdp_happiness <- data_set[-c(1:4), ] %>%
filter(world.happiness.report.score != "-") %>%
select(indicator, GDP, world.happiness.report.score)
happiness_plot <- plot_ly(gdp_happiness, x = ~GDP, y = ~world.happiness.report.score) %>%
add_markers(x = ~GDP, y = ~world.happiness.report.score)
happiness_plot
happiness_plot <- plot_ly(gdp_happiness, y = ~GDP, x = ~world.happiness.report.score) %>%
add_markers(y = ~GDP, x = ~world.happiness.report.score)
happiness_plot
happiness_plot <- plot_ly(gdp_happiness, y = ~GDP, x = ~world.happiness.report.score) %>%
add_markers(y = ~GDP, x = ~world.happiness.report.score, text = ~ paste(indicator, GDP, world.happiness.report.score, sep = "<br />")
)
happiness_plot <- plot_ly(gdp_happiness, y = ~GDP, x = ~world.happiness.report.score) %>%
add_markers(y = ~GDP, x = ~world.happiness.report.score, text = ~ paste(indicator, GDP, world.happiness.report.score, sep = "<br />"
hovertext = "text")
)
happiness_plot <- plot_ly(gdp_happiness, y = ~GDP, x = ~world.happiness.report.score) %>%
add_markers(y = ~GDP, x = ~world.happiness.report.score, text = ~ paste(indicator, GDP, world.happiness.report.score, sep = "<br />"),
hovertext = "text")
happiness_plot
happiness_plot <- plot_ly(gdp_happiness, y = ~GDP, x = ~world.happiness.report.score) %>%
add_markers(y = ~GDP, x = ~world.happiness.report.score, text = ~ paste(indicator, GDP, world.happiness.report.score, sep = "<br />"),
hovertext = text)
happiness_plot
View(data_set)
happiness_plot <- plot_ly(gdp_happiness, y = ~GDP, x = ~world.happiness.report.score) %>%
add_markers(y = ~GDP, x = ~world.happiness.report.score, text = ~ paste(indicator, "GDP(billions, PPP):", GDP, "World Happiness:", world.happiness.report.score, sep = "<br />"),
hovertext = text)
happiness_plot
happiness_plot <- plot_ly(gdp_happiness, y = ~GDP, x = ~world.happiness.report.score) %>%
add_markers(y = ~GDP, x = ~world.happiness.report.score, text = ~ paste(indicator, "GDP(billions, PPP):", GDP, "World Happiness:", world.happiness.report.score, sep = "<br />"),
hovertext = text)
